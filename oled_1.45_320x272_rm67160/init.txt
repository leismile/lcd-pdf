//======================================================================
// Copyright (c) 2016 by Steward Fu
// All rights reserved
// 2016/11/14
//======================================================================
#include "../include/stc15w4k56s4.h"

#define RST		P54
#define DCX		P43
#define CSX		P42
#define SDI		P41
#define SCL		P40
#define SDO		P37

void delayms(unsigned int ms)
{
  unsigned int cnt;
  while(ms--){
    for(cnt=0; cnt<1000; cnt++);
  }
}

unsigned int spi_raw_read(void)
{
	unsigned int cnt=0, ret=0;
	
	for(cnt=0; cnt<8; cnt++){
		SCL = 0;			
		SCL = 1;
	}

	for(cnt=0; cnt<16; cnt++){
		SCL = 0;			
		SCL = 1;
		ret<<= 1;
		ret|= SDO;
	}
	return ret;
}

void spi_raw_write(unsigned char val)
{
	unsigned char cnt=0;

	for(cnt=0; cnt<8; cnt++){
		SCL = 0;			
		if((val & 0x80) == 0x80){
			SDI = 1;
		}
		else{
			SDI = 0;
		}
		val<<= 1;
		SCL = 1;
	}
}

void spi_write_9bit(unsigned char flag, unsigned char val)
{
	SCL = 0;
	SDI = flag;
	SCL = 1;
	spi_raw_write(val);
}

unsigned char spi_read(unsigned char cmd)
{
	spi_write_9bit(0, cmd);
	return spi_raw_read();
}

void spi_write(unsigned char cmd, unsigned char dat)
{
	spi_write_9bit(0, cmd);
	spi_write_9bit(1, dat);
}

void reset(void)
{
	RST = 0;
	delayms(150);
	RST = 1;
	delayms(150);
	CSX = 0;
}

void init_2(void)
{
	spi_write(0xfe, 0x04);
	spi_write(0x00, 0xdc);
	spi_write(0x01, 0x00);
	spi_write(0x02, 0x02);
	spi_write(0x03, 0x00);
	spi_write(0x04, 0x00);
	spi_write(0x05, 0x03);
	spi_write(0x06, 0x16);
	spi_write(0x07, 0x13);
	spi_write(0x08, 0x08);
	spi_write(0x09, 0xdc);
	spi_write(0x0a, 0x00);
	spi_write(0x0b, 0x02);
	spi_write(0x0c, 0x00);
	spi_write(0x0d, 0x00);
	spi_write(0x0e, 0x02);
	spi_write(0x0f, 0x16);
	spi_write(0x10, 0x18);
	spi_write(0x11, 0x08);
	spi_write(0x12, 0x92);
	spi_write(0x13, 0x00);
	spi_write(0x14, 0x02);
	spi_write(0x15, 0x05);
	spi_write(0x16, 0x40);
	spi_write(0x17, 0x03);
	spi_write(0x18, 0x16);
	spi_write(0x19, 0xd7);
	spi_write(0x1a, 0x01);
	spi_write(0x1b, 0xdc);
	spi_write(0x1c, 0x00);
	spi_write(0x1d, 0x04);
	spi_write(0x1e, 0x00);
	spi_write(0x1f, 0x00);
	spi_write(0x20, 0x03);
	spi_write(0x21, 0x16);
	spi_write(0x22, 0x18);
	spi_write(0x23, 0x08);
	spi_write(0x24, 0xdc);
	spi_write(0x25, 0x00);
	spi_write(0x26, 0x04);
	spi_write(0x27, 0x00);
	spi_write(0x28, 0x00);
	spi_write(0x29, 0x01);
	spi_write(0x2a, 0x16);
	spi_write(0x2b, 0x18);
	spi_write(0x2d, 0x08);
	spi_write(0x4c, 0x99);
	spi_write(0x4d, 0x00);
	spi_write(0x4e, 0x00);
	spi_write(0x4f, 0x00);
	spi_write(0x50, 0x01);
	spi_write(0x51, 0x0a);
	spi_write(0x52, 0x00);
	spi_write(0x5a, 0xe4);
	spi_write(0x5e, 0x77);
	spi_write(0x5f, 0x77);
	spi_write(0x60, 0x34);
	spi_write(0x61, 0x02);
	spi_write(0x62, 0x81);
	spi_write(0xfe, 0x07);
	spi_write(0x07, 0x4f);
	spi_write(0xfe, 01);
	spi_write(0x05, 0x15);
	spi_write(0x0e, 0x84);
	spi_write(0x10, 0x51);
	spi_write(0x15, 0x82);
	spi_write(0x18, 0x47);
	spi_write(0x19, 0x36);
	spi_write(0x1a, 0x10);
	spi_write(0x1c, 0x77);
	spi_write(0x21, 0x28);
	spi_write(0x22, 0x90);
	spi_write(0x23, 0x20);
	spi_write(0x25, 0x03);
	spi_write(0x26, 0x4a);
	spi_write(0x2a, 0x03);
	spi_write(0x37, 0x0c);
	spi_write(0x3a, 0x00);
	spi_write(0x3b, 0x40);
	spi_write(0x3d, 0x01);
	spi_write(0x3f, 0x38);
	spi_write(0x40, 0x01);
	spi_write(0x41, 0x01);
	spi_write(0x42, 0x33);
	spi_write(0x43, 0x66);
	spi_write(0x44, 0x11);
	spi_write(0x45, 0x44);
	spi_write(0x46, 0x22);
	spi_write(0x47, 0x55);
	spi_write(0x4c, 0x33);
	spi_write(0x4d, 0x66);
	spi_write(0x4e, 0x11);
	spi_write(0x4f, 0x44);
	spi_write(0x50, 0x22);
	spi_write(0x51, 0x55);
	spi_write(0x56, 0x11);
	spi_write(0x58, 0x44);
	spi_write(0x59, 0x22);
	spi_write(0x5a, 0x55);
	spi_write(0x5b, 0x33);
	spi_write(0x5c, 0x66);
	spi_write(0x61, 0x11);
	spi_write(0x62, 0x44);
	spi_write(0x63, 0x22);
	spi_write(0x64, 0x55);
	spi_write(0x65, 0x33);
	spi_write(0x66, 0x66);
	spi_write(0x70, 0xa5);
	spi_write(0xfe, 0x05);
	spi_write(0x05, 0x08);
	spi_write(0xfe, 0x0a);
	spi_write(0x29, 0x10);
	spi_write(0xfe, 0x00);
	spi_write(0x35, 0x00);
	spi_write(0x11, 0x00);
	spi_write(0x36, 0x40);
	spi_write(0x29, 0x00);
}

void init_1(void)
{
	//1
	spi_write(0xfe, 0x01);
	spi_write(0x05, 0x40);
	spi_write(0x06, 0x55);
	spi_write(0x10, 0x71);
	spi_write(0x0e, 0x80);
	spi_write(0x19, 0x55);
	spi_write(0x18, 0x88);
	spi_write(0x1a, 0x10);
	spi_write(0x1c, 0x77);
	spi_write(0x23, 0x21);
	spi_write(0x21, 0x40);
	spi_write(0x22, 0xb7);
	spi_write(0x25, 0x05);
	spi_write(0x26, 0xfc);
	spi_write(0x70, 0xff);

	//2
	spi_write(0xfe, 0x04);
	spi_write(0x5d, 0x10);
	spi_write(0x5a, 0xff);

	//3
	spi_write(0xfe, 0x04);
	spi_write(0x00, 0xcc);
	spi_write(0x01, 0x00);
	spi_write(0x02, 0x02);
	spi_write(0x03, 0x00);
	spi_write(0x04, 0xa8);
	spi_write(0x05, 0x01);
	spi_write(0x06, 0x8e);
	spi_write(0x07, 0xfc);
	spi_write(0x08, 0x02);

	//4
	spi_write(0xfe, 0x04);
	spi_write(0x09, 0xcc);
	spi_write(0x0a, 0x00);
	spi_write(0x0b, 0x04);
	spi_write(0x0c, 0x00);
	spi_write(0x0d, 0x80);
	spi_write(0x0e, 0x02);
	spi_write(0x0f, 0x01);
	spi_write(0x10, 0x00);
	spi_write(0x11, 0x02);

	//5
	spi_write(0xfe, 0x04);
	spi_write(0x12, 0x8c);
	spi_write(0x13, 0x00);
	spi_write(0x14, 0x02);
	spi_write(0x15, 0x01);
	spi_write(0x16, 0x08);
	spi_write(0x17, 0x00);
	spi_write(0x18, 0x8e);
	spi_write(0x19, 0x36);
	spi_write(0x1a, 0x02);

  //6
	spi_write(0xfe, 0x04);
	spi_write(0x1b, 0xcc);
	spi_write(0x1c, 0x00);
	spi_write(0x1d, 0x02);
	spi_write(0x1e, 0x00);
	spi_write(0x1f, 0x08);
	spi_write(0x20, 0x00);
	spi_write(0x21, 0x8e);
	spi_write(0x22, 0x00);
	spi_write(0x23, 0x02);

	//7
	spi_write(0xfe, 0x04);
	spi_write(0x24, 0xcc);
	spi_write(0x25, 0x00);
	spi_write(0x26, 0x02);
	spi_write(0x27, 0x00);
	spi_write(0x28, 0x08);
	spi_write(0x29, 0x01);
	spi_write(0x2a, 0x8e);
	spi_write(0x2b, 0x42);
	spi_write(0x2d, 0x02);

	//8
	spi_write(0xfe, 0x04);
	spi_write(0x2f, 0x8c);
	spi_write(0x30, 0x00);
	spi_write(0x31, 0x01);
	spi_write(0x32, 0x03);
	spi_write(0x33, 0x00);
	spi_write(0x34, 0x00);
	spi_write(0x35, 0x01);
	spi_write(0x36, 0x43);
	spi_write(0x37, 0x02);

	//9
	spi_write(0xfe, 0x04);
	spi_write(0x38, 0xcc);
	spi_write(0x39, 0x00);
	spi_write(0x3a, 0x02);
	spi_write(0x3b, 0x00);
	spi_write(0x3d, 0x20);
	spi_write(0x3f, 0x01);
	spi_write(0x40, 0xa4);
	spi_write(0x41, 0x57);
	spi_write(0x42, 0x02);

	//10
	spi_write(0xfe, 0x04);
	spi_write(0x43, 0xcc);
	spi_write(0x44, 0x00);
	spi_write(0x45, 0x04);
	spi_write(0x46, 0x00);
	spi_write(0x47, 0x00);
	spi_write(0x48, 0x00);
	spi_write(0x49, 0x01);
	spi_write(0x4a, 0x00);
	spi_write(0x4b, 0x02);

	//11
	spi_write(0xfe, 0x04);
	spi_write(0x4c, 0x88);
	spi_write(0x4d, 0x00);
	spi_write(0x4e, 0x01);
	spi_write(0x4f, 0x08);
	spi_write(0x50, 0x01);
	spi_write(0x51, 0x8e);
	spi_write(0x52, 0x36);

	//12
	spi_write(0xfe, 0x01);
	spi_write(0x3a, 0x00);
	spi_write(0x3b, 0x00);
	spi_write(0x3d, 0x10);
	spi_write(0x3f, 0x2f);
	spi_write(0x40, 0x10);
	spi_write(0x41, 0x0a);
	spi_write(0x37, 0x10);

	//13
	spi_write(0xfe, 0x04);
	spi_write(0x5e, 0x30);
	spi_write(0x5f, 0x32);
	spi_write(0x60, 0x84);
	spi_write(0x61, 0x76);
	spi_write(0x62, 0x51);

	//14
	spi_write(0xfe, 0x05);
	spi_write(0x05, 0x11);
	spi_write(0x2a, 0x00);
	spi_write(0x91, 0x00);

	//15
	spi_write(0xfe, 0x01);
	spi_write(0x42, 0x33);
	spi_write(0x43, 0x22);
	spi_write(0x44, 0x11);
	spi_write(0x45, 0x66);
	spi_write(0x46, 0x55);
	spi_write(0x47, 0x44);
	spi_write(0x4c, 0x33);
	spi_write(0x4d, 0x22);
	spi_write(0x4e, 0x11);
	spi_write(0x4f, 0x66);
	spi_write(0x50, 0x55);
	spi_write(0x51, 0x44);
	spi_write(0x56, 0x11);
	spi_write(0x58, 0x22);
	spi_write(0x59, 0x33);
	spi_write(0x5a, 0x44);
	spi_write(0x5b, 0x55);
	spi_write(0x5c, 0x66);
	spi_write(0x61, 0x11);
	spi_write(0x62, 0x22);
	spi_write(0x63, 0x33);
	spi_write(0x64, 0x44);
	spi_write(0x65, 0x55);
	spi_write(0x66, 0x66);

	//16
	spi_write(0xfe, 0x00);
	spi_write(0x35, 0x00);

	//17
	spi_write_9bit(0, 0x11);
	delayms(150);

	//18
	spi_write_9bit(0, 0x29);
} 

void color(void)
{
	unsigned int x, y;

	spi_write(0x51, 0x20);

	spi_write_9bit(0, 0x2c);
	for(y=0; y<272; y++){
		for(x=0; x<340; x++){
			spi_write_9bit(0, 0xff);
			spi_write_9bit(0, 0xff);
			spi_write_9bit(0, 0xff);
		}
	}
}

void gpio_init(void)
{
  P0M0 = 0x00;
  P0M1 = 0x00;
  P1M0 = 0x00;
  P1M1 = 0x00;
  P2M0 = 0x00;
  P2M1 = 0x00;
  P3M0 = 0x00;
  P3M1 = 0x00;
  P4M0 = 0x00;
  P4M1 = 0x00;
  P5M0 = 0x00;
  P5M1 = 0x00;
}

void uart_init(void)		//9600bps@11.0592MHz
{
	SCON = 0x50;		//8bit and variable baudrate
	AUXR |= 0x40;		//Timer1's clock is Fosc (1T)
	AUXR &= 0xFE;		//Use Timer1 as baudrate generator
	TMOD &= 0x0F;		//Set Timer1 as 16-bit auto reload mode
	TL1 = 0xE0;		//Initial timer value
	TH1 = 0xFE;		//Initial timer value
	ET1 = 0;		//Disable Timer1 interrupt
	TR1 = 1;		//Timer1 running
}

void uart_send(unsigned char val)
{
	SBUF = val;   //將buffer內容送至SBUF傳送出去
	while (TI == 0); //判斷TI是否等於1(傳送完畢), 否則停在此行
	TI = 0;          //清除串列傳送完畢旗號
}

void main(void)
{
	unsigned int ret=0;

  gpio_init();
	uart_init();
  AUXR|= 0x80;

	reset();
  init_1();
  color();

	delayms(3000);
	spi_write_9bit(0, 0x51);
	spi_write_9bit(1, 0xaa);
	
	spi_write_9bit(0, 0x52);
	ret = spi_raw_read();
	uart_send(ret >> 8);
	uart_send(ret);
	CSX = 1;
		
  while(1){
    P55 = 0;
    delayms(1000);
    P55 = 1;
    delayms(1000);
  }
}

